Pre-requisite:
Generate 2 Ethereum testnet addresses (address_1, address_2) 
Keep Address_1 as your main test address (use ropsten test network )
Task:
(1 point) Create a user-interacting interface to connect to different blockchain networks, i.e. main net, testnets (any two), and ganache 
(Hint: Take input from the user, use the if-else method to connect to different networks. User different Infura Endpoints)
(1 point) Get some Ethereum test coins to your testnet address_1 from any source. Provide the Transaction link of the testnet work. 
(2 points) From Task_1 connect to Ethereum network and provide codes to interact with blockchain:
 Checking block height at any time.
 Getting information about a block
 Getting balance information of your address_1
 From Task 3.3. Convert the balance to ether.
(Hint: https://web3js.readthedocs.io/en/v1.2.4/ or https://web3py.readthedocs.io/ (Links to an external site.))
(1 point) Send some Eth test coins from address_1 to address_2 and provide Transaction_ID.
(Use seminar file, not Metamask)
(2 points) Create a smart contract to add 2 numbers.
(Hint:
 Use ide http://remix.ethereum.org/ (Links to an external site.).
 Use any version of the compiler.
Create a function add (passing 2 parameters from User), variables declared in the state variable.
Connect to any blockchain.
Just provide the code
Reference document: https://docs.soliditylang.org/en/v0.7.5/) (Links to an external site.)
(3 points) Create an ERC20 smart contract:
Create 100 tokens.
Deploy the contract from address_2. Provide contract creation transaction_id and contract address (the address that is created when the contract is deployed) and 3 letters abbreviation of your coin. We will check the existence on the ropsten testnet.
Send ten tokens to 0x7F0623b3Ed830BF5e7CE54A8a3cE7676779522F9 address. (Provide Transaction Id)
Guidelines:


Comments:
9.5/10
1. 1 2. 1 3. 2 4. 1 5. 1.5 (Function add is good, but uint c should be public to be reflected on the blockchain) 6. 3
